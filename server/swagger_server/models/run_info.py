# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RunInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, post_time: str=None, started: bool=None, done: bool=None, subgraph_ids: List[str]=None):  # noqa: E501
        """RunInfo - a model defined in Swagger

        :param description: The description of this RunInfo.  # noqa: E501
        :type description: str
        :param id: The id of this RunInfo.  # noqa: E501
        :type id: str
        :param post_time: The post_time of this RunInfo.  # noqa: E501
        :type post_time: str
        :param started: The started of this RunInfo.  # noqa: E501
        :type started: bool
        :param done: The done of this RunInfo.  # noqa: E501
        :type done: bool
        :param subgraph_ids: The subgraph_ids of this RunInfo.  # noqa: E501
        :type subgraph_ids: List[str]
        """
        self.swagger_types = {
            'description': str,
            'id': str,
            'post_time': str,
            'started': bool,
            'done': bool,
            'subgraph_ids': List[str]
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'post_time': 'post_time',
            'started': 'started',
            'done': 'done',
            'subgraph_ids': 'subgraph_ids'
        }

        self._description = description
        self._id = id
        self._post_time = post_time
        self._started = started
        self._done = done
        self._subgraph_ids = subgraph_ids

    @classmethod
    def from_dict(cls, dikt) -> 'RunInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunInfo of this RunInfo.  # noqa: E501
        :rtype: RunInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this RunInfo.

        Description of the run  # noqa: E501

        :return: The description of this RunInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this RunInfo.

        Description of the run  # noqa: E501

        :param description: The description of this RunInfo.
        :type description: str
        """

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this RunInfo.

        Id of the score object  # noqa: E501

        :return: The id of this RunInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this RunInfo.

        Id of the score object  # noqa: E501

        :param id: The id of this RunInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def post_time(self) -> str:
        """Gets the post_time of this RunInfo.

        Time of initial run post  # noqa: E501

        :return: The post_time of this RunInfo.
        :rtype: str
        """
        return self._post_time

    @post_time.setter
    def post_time(self, post_time: str):
        """Sets the post_time of this RunInfo.

        Time of initial run post  # noqa: E501

        :param post_time: The post_time of this RunInfo.
        :type post_time: str
        """
        if post_time is None:
            raise ValueError("Invalid value for `post_time`, must not be `None`")  # noqa: E501

        self._post_time = post_time

    @property
    def started(self) -> bool:
        """Gets the started of this RunInfo.

        Whether the run has already started  # noqa: E501

        :return: The started of this RunInfo.
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started: bool):
        """Sets the started of this RunInfo.

        Whether the run has already started  # noqa: E501

        :param started: The started of this RunInfo.
        :type started: bool
        """
        if started is None:
            raise ValueError("Invalid value for `started`, must not be `None`")  # noqa: E501

        self._started = started

    @property
    def done(self) -> bool:
        """Gets the done of this RunInfo.

        Whether the run is completed  # noqa: E501

        :return: The done of this RunInfo.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done: bool):
        """Sets the done of this RunInfo.

        Whether the run is completed  # noqa: E501

        :param done: The done of this RunInfo.
        :type done: bool
        """
        if done is None:
            raise ValueError("Invalid value for `done`, must not be `None`")  # noqa: E501

        self._done = done

    @property
    def subgraph_ids(self) -> List[str]:
        """Gets the subgraph_ids of this RunInfo.


        :return: The subgraph_ids of this RunInfo.
        :rtype: List[str]
        """
        return self._subgraph_ids

    @subgraph_ids.setter
    def subgraph_ids(self, subgraph_ids: List[str]):
        """Sets the subgraph_ids of this RunInfo.


        :param subgraph_ids: The subgraph_ids of this RunInfo.
        :type subgraph_ids: List[str]
        """

        self._subgraph_ids = subgraph_ids
