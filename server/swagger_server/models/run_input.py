# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.parameter_set import ParameterSet  # noqa: F401,E501
from swagger_server import util


class RunInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, parameter_set_id: str=None, parameter_set: ParameterSet=None, graph_id: str=None, score_id: str=None, receptors_id: str=None, terminals_id: str=None, root: str=None):  # noqa: E501
        """RunInput - a model defined in Swagger

        :param description: The description of this RunInput.  # noqa: E501
        :type description: str
        :param parameter_set_id: The parameter_set_id of this RunInput.  # noqa: E501
        :type parameter_set_id: str
        :param parameter_set: The parameter_set of this RunInput.  # noqa: E501
        :type parameter_set: ParameterSet
        :param graph_id: The graph_id of this RunInput.  # noqa: E501
        :type graph_id: str
        :param score_id: The score_id of this RunInput.  # noqa: E501
        :type score_id: str
        :param receptors_id: The receptors_id of this RunInput.  # noqa: E501
        :type receptors_id: str
        :param terminals_id: The terminals_id of this RunInput.  # noqa: E501
        :type terminals_id: str
        :param root: The root of this RunInput.  # noqa: E501
        :type root: str
        """
        self.swagger_types = {
            'description': str,
            'parameter_set_id': str,
            'parameter_set': ParameterSet,
            'graph_id': str,
            'score_id': str,
            'receptors_id': str,
            'terminals_id': str,
            'root': str
        }

        self.attribute_map = {
            'description': 'description',
            'parameter_set_id': 'parameter_set_id',
            'parameter_set': 'parameter_set',
            'graph_id': 'graph_id',
            'score_id': 'score_id',
            'receptors_id': 'receptors_id',
            'terminals_id': 'terminals_id',
            'root': 'root'
        }

        self._description = description
        self._parameter_set_id = parameter_set_id
        self._parameter_set = parameter_set
        self._graph_id = graph_id
        self._score_id = score_id
        self._receptors_id = receptors_id
        self._terminals_id = terminals_id
        self._root = root

    @classmethod
    def from_dict(cls, dikt) -> 'RunInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunInput of this RunInput.  # noqa: E501
        :rtype: RunInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this RunInput.

        Description of run  # noqa: E501

        :return: The description of this RunInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this RunInput.

        Description of run  # noqa: E501

        :param description: The description of this RunInput.
        :type description: str
        """

        self._description = description

    @property
    def parameter_set_id(self) -> str:
        """Gets the parameter_set_id of this RunInput.

        Id of a parameter set to run the algorithm with  # noqa: E501

        :return: The parameter_set_id of this RunInput.
        :rtype: str
        """
        return self._parameter_set_id

    @parameter_set_id.setter
    def parameter_set_id(self, parameter_set_id: str):
        """Sets the parameter_set_id of this RunInput.

        Id of a parameter set to run the algorithm with  # noqa: E501

        :param parameter_set_id: The parameter_set_id of this RunInput.
        :type parameter_set_id: str
        """

        self._parameter_set_id = parameter_set_id

    @property
    def parameter_set(self) -> ParameterSet:
        """Gets the parameter_set of this RunInput.


        :return: The parameter_set of this RunInput.
        :rtype: ParameterSet
        """
        return self._parameter_set

    @parameter_set.setter
    def parameter_set(self, parameter_set: ParameterSet):
        """Sets the parameter_set of this RunInput.


        :param parameter_set: The parameter_set of this RunInput.
        :type parameter_set: ParameterSet
        """

        self._parameter_set = parameter_set

    @property
    def graph_id(self) -> str:
        """Gets the graph_id of this RunInput.

        Id of graph underlying the run  # noqa: E501

        :return: The graph_id of this RunInput.
        :rtype: str
        """
        return self._graph_id

    @graph_id.setter
    def graph_id(self, graph_id: str):
        """Sets the graph_id of this RunInput.

        Id of graph underlying the run  # noqa: E501

        :param graph_id: The graph_id of this RunInput.
        :type graph_id: str
        """
        if graph_id is None:
            raise ValueError("Invalid value for `graph_id`, must not be `None`")  # noqa: E501

        self._graph_id = graph_id

    @property
    def score_id(self) -> str:
        """Gets the score_id of this RunInput.

        Id of node score used in the run  # noqa: E501

        :return: The score_id of this RunInput.
        :rtype: str
        """
        return self._score_id

    @score_id.setter
    def score_id(self, score_id: str):
        """Sets the score_id of this RunInput.

        Id of node score used in the run  # noqa: E501

        :param score_id: The score_id of this RunInput.
        :type score_id: str
        """
        if score_id is None:
            raise ValueError("Invalid value for `score_id`, must not be `None`")  # noqa: E501

        self._score_id = score_id

    @property
    def receptors_id(self) -> str:
        """Gets the receptors_id of this RunInput.

        Id of a node set acting as receptors in the run  # noqa: E501

        :return: The receptors_id of this RunInput.
        :rtype: str
        """
        return self._receptors_id

    @receptors_id.setter
    def receptors_id(self, receptors_id: str):
        """Sets the receptors_id of this RunInput.

        Id of a node set acting as receptors in the run  # noqa: E501

        :param receptors_id: The receptors_id of this RunInput.
        :type receptors_id: str
        """

        self._receptors_id = receptors_id

    @property
    def terminals_id(self) -> str:
        """Gets the terminals_id of this RunInput.

        Id of a node set acting as terminals in the run  # noqa: E501

        :return: The terminals_id of this RunInput.
        :rtype: str
        """
        return self._terminals_id

    @terminals_id.setter
    def terminals_id(self, terminals_id: str):
        """Sets the terminals_id of this RunInput.

        Id of a node set acting as terminals in the run  # noqa: E501

        :param terminals_id: The terminals_id of this RunInput.
        :type terminals_id: str
        """

        self._terminals_id = terminals_id

    @property
    def root(self) -> str:
        """Gets the root of this RunInput.

        Node id of a fixed root node  # noqa: E501

        :return: The root of this RunInput.
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root: str):
        """Sets the root of this RunInput.

        Node id of a fixed root node  # noqa: E501

        :param root: The root of this RunInput.
        :type root: str
        """

        self._root = root
