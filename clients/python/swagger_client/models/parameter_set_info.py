# coding: utf-8

"""
    DeRegNet REST API

    DeRegNet REST API   # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: deregnet@informatik.uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class ParameterSetInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'id': 'str',
        'set_parameters': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'id': 'id',
        'set_parameters': 'set_parameters'
    }

    def __init__(self, description=None, id=None, set_parameters=None):  # noqa: E501
        """ParameterSetInfo - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._id = None
        self._set_parameters = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.id = id
        self.set_parameters = set_parameters

    @property
    def description(self):
        """Gets the description of this ParameterSetInfo.  # noqa: E501

        Description of the run  # noqa: E501

        :return: The description of this ParameterSetInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ParameterSetInfo.

        Description of the run  # noqa: E501

        :param description: The description of this ParameterSetInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ParameterSetInfo.  # noqa: E501

        Id of the score object  # noqa: E501

        :return: The id of this ParameterSetInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ParameterSetInfo.

        Id of the score object  # noqa: E501

        :param id: The id of this ParameterSetInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def set_parameters(self):
        """Gets the set_parameters of this ParameterSetInfo.  # noqa: E501


        :return: The set_parameters of this ParameterSetInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._set_parameters

    @set_parameters.setter
    def set_parameters(self, set_parameters):
        """Sets the set_parameters of this ParameterSetInfo.


        :param set_parameters: The set_parameters of this ParameterSetInfo.  # noqa: E501
        :type: list[str]
        """
        if set_parameters is None:
            raise ValueError("Invalid value for `set_parameters`, must not be `None`")  # noqa: E501

        self._set_parameters = set_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterSetInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
