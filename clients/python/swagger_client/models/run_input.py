# coding: utf-8

"""
    DeRegNet REST API

    DeRegNet REST API   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: deregnet@informatik.uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six

from swagger_client.models.parameter_set import ParameterSet  # noqa: F401,E501


class RunInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'parameter_set_id': 'str',
        'parameter_set': 'ParameterSet',
        'graph_id': 'str',
        'score_id': 'str',
        'receptors_id': 'str',
        'terminals_id': 'str',
        'root': 'str'
    }

    attribute_map = {
        'description': 'description',
        'parameter_set_id': 'parameter_set_id',
        'parameter_set': 'parameter_set',
        'graph_id': 'graph_id',
        'score_id': 'score_id',
        'receptors_id': 'receptors_id',
        'terminals_id': 'terminals_id',
        'root': 'root'
    }

    def __init__(self, description=None, parameter_set_id=None, parameter_set=None, graph_id=None, score_id=None, receptors_id=None, terminals_id=None, root=None):  # noqa: E501
        """RunInput - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._parameter_set_id = None
        self._parameter_set = None
        self._graph_id = None
        self._score_id = None
        self._receptors_id = None
        self._terminals_id = None
        self._root = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if parameter_set_id is not None:
            self.parameter_set_id = parameter_set_id
        if parameter_set is not None:
            self.parameter_set = parameter_set
        self.graph_id = graph_id
        self.score_id = score_id
        if receptors_id is not None:
            self.receptors_id = receptors_id
        if terminals_id is not None:
            self.terminals_id = terminals_id
        if root is not None:
            self.root = root

    @property
    def description(self):
        """Gets the description of this RunInput.  # noqa: E501

        Description of run  # noqa: E501

        :return: The description of this RunInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RunInput.

        Description of run  # noqa: E501

        :param description: The description of this RunInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def parameter_set_id(self):
        """Gets the parameter_set_id of this RunInput.  # noqa: E501

        Id of a parameter set to run the algorithm with  # noqa: E501

        :return: The parameter_set_id of this RunInput.  # noqa: E501
        :rtype: str
        """
        return self._parameter_set_id

    @parameter_set_id.setter
    def parameter_set_id(self, parameter_set_id):
        """Sets the parameter_set_id of this RunInput.

        Id of a parameter set to run the algorithm with  # noqa: E501

        :param parameter_set_id: The parameter_set_id of this RunInput.  # noqa: E501
        :type: str
        """

        self._parameter_set_id = parameter_set_id

    @property
    def parameter_set(self):
        """Gets the parameter_set of this RunInput.  # noqa: E501


        :return: The parameter_set of this RunInput.  # noqa: E501
        :rtype: ParameterSet
        """
        return self._parameter_set

    @parameter_set.setter
    def parameter_set(self, parameter_set):
        """Sets the parameter_set of this RunInput.


        :param parameter_set: The parameter_set of this RunInput.  # noqa: E501
        :type: ParameterSet
        """

        self._parameter_set = parameter_set

    @property
    def graph_id(self):
        """Gets the graph_id of this RunInput.  # noqa: E501

        Id of graph underlying the run  # noqa: E501

        :return: The graph_id of this RunInput.  # noqa: E501
        :rtype: str
        """
        return self._graph_id

    @graph_id.setter
    def graph_id(self, graph_id):
        """Sets the graph_id of this RunInput.

        Id of graph underlying the run  # noqa: E501

        :param graph_id: The graph_id of this RunInput.  # noqa: E501
        :type: str
        """
        if graph_id is None:
            raise ValueError("Invalid value for `graph_id`, must not be `None`")  # noqa: E501

        self._graph_id = graph_id

    @property
    def score_id(self):
        """Gets the score_id of this RunInput.  # noqa: E501

        Id of node score used in the run  # noqa: E501

        :return: The score_id of this RunInput.  # noqa: E501
        :rtype: str
        """
        return self._score_id

    @score_id.setter
    def score_id(self, score_id):
        """Sets the score_id of this RunInput.

        Id of node score used in the run  # noqa: E501

        :param score_id: The score_id of this RunInput.  # noqa: E501
        :type: str
        """
        if score_id is None:
            raise ValueError("Invalid value for `score_id`, must not be `None`")  # noqa: E501

        self._score_id = score_id

    @property
    def receptors_id(self):
        """Gets the receptors_id of this RunInput.  # noqa: E501

        Id of a node set acting as receptors in the run  # noqa: E501

        :return: The receptors_id of this RunInput.  # noqa: E501
        :rtype: str
        """
        return self._receptors_id

    @receptors_id.setter
    def receptors_id(self, receptors_id):
        """Sets the receptors_id of this RunInput.

        Id of a node set acting as receptors in the run  # noqa: E501

        :param receptors_id: The receptors_id of this RunInput.  # noqa: E501
        :type: str
        """

        self._receptors_id = receptors_id

    @property
    def terminals_id(self):
        """Gets the terminals_id of this RunInput.  # noqa: E501

        Id of a node set acting as terminals in the run  # noqa: E501

        :return: The terminals_id of this RunInput.  # noqa: E501
        :rtype: str
        """
        return self._terminals_id

    @terminals_id.setter
    def terminals_id(self, terminals_id):
        """Sets the terminals_id of this RunInput.

        Id of a node set acting as terminals in the run  # noqa: E501

        :param terminals_id: The terminals_id of this RunInput.  # noqa: E501
        :type: str
        """

        self._terminals_id = terminals_id

    @property
    def root(self):
        """Gets the root of this RunInput.  # noqa: E501

        Node id of a fixed root node  # noqa: E501

        :return: The root of this RunInput.  # noqa: E501
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this RunInput.

        Node id of a fixed root node  # noqa: E501

        :param root: The root of this RunInput.  # noqa: E501
        :type: str
        """

        self._root = root

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
