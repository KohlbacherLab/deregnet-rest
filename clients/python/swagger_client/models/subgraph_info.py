# coding: utf-8

"""
    DeRegNet REST API

    DeRegNet REST API   # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: deregnet@informatik.uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

import pprint
import re  # noqa: F401

import six


class SubgraphInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'run_id': 'str',
        'num_nodes': 'int',
        'num_edges': 'int',
        'optimal': 'bool',
        'optimality_type': 'str',
        'root': 'str',
        'score': 'float'
    }

    attribute_map = {
        'id': 'id',
        'run_id': 'run_id',
        'num_nodes': 'num_nodes',
        'num_edges': 'num_edges',
        'optimal': 'optimal',
        'optimality_type': 'optimality_type',
        'root': 'root',
        'score': 'score'
    }

    def __init__(self, id=None, run_id=None, num_nodes=None, num_edges=None, optimal=None, optimality_type=None, root=None, score=None):  # noqa: E501
        """SubgraphInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._run_id = None
        self._num_nodes = None
        self._num_edges = None
        self._optimal = None
        self._optimality_type = None
        self._root = None
        self._score = None
        self.discriminator = None

        self.id = id
        self.run_id = run_id
        self.num_nodes = num_nodes
        self.num_edges = num_edges
        self.optimal = optimal
        self.optimality_type = optimality_type
        self.root = root
        self.score = score

    @property
    def id(self):
        """Gets the id of this SubgraphInfo.  # noqa: E501

        Subgraph Id  # noqa: E501

        :return: The id of this SubgraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubgraphInfo.

        Subgraph Id  # noqa: E501

        :param id: The id of this SubgraphInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def run_id(self):
        """Gets the run_id of this SubgraphInfo.  # noqa: E501

        Id of run the subgraph is a result of  # noqa: E501

        :return: The run_id of this SubgraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this SubgraphInfo.

        Id of run the subgraph is a result of  # noqa: E501

        :param run_id: The run_id of this SubgraphInfo.  # noqa: E501
        :type: str
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def num_nodes(self):
        """Gets the num_nodes of this SubgraphInfo.  # noqa: E501

        Number of nodes in subgraph  # noqa: E501

        :return: The num_nodes of this SubgraphInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_nodes

    @num_nodes.setter
    def num_nodes(self, num_nodes):
        """Sets the num_nodes of this SubgraphInfo.

        Number of nodes in subgraph  # noqa: E501

        :param num_nodes: The num_nodes of this SubgraphInfo.  # noqa: E501
        :type: int
        """
        if num_nodes is None:
            raise ValueError("Invalid value for `num_nodes`, must not be `None`")  # noqa: E501

        self._num_nodes = num_nodes

    @property
    def num_edges(self):
        """Gets the num_edges of this SubgraphInfo.  # noqa: E501

        Number of edges in subgraph  # noqa: E501

        :return: The num_edges of this SubgraphInfo.  # noqa: E501
        :rtype: int
        """
        return self._num_edges

    @num_edges.setter
    def num_edges(self, num_edges):
        """Sets the num_edges of this SubgraphInfo.

        Number of edges in subgraph  # noqa: E501

        :param num_edges: The num_edges of this SubgraphInfo.  # noqa: E501
        :type: int
        """
        if num_edges is None:
            raise ValueError("Invalid value for `num_edges`, must not be `None`")  # noqa: E501

        self._num_edges = num_edges

    @property
    def optimal(self):
        """Gets the optimal of this SubgraphInfo.  # noqa: E501

        Whether the subgraph is optimal, ie not prematurely stopped by a 'gap_cut' or 'time_limit'. This field is independent from the 'optimality_type' field.   # noqa: E501

        :return: The optimal of this SubgraphInfo.  # noqa: E501
        :rtype: bool
        """
        return self._optimal

    @optimal.setter
    def optimal(self, optimal):
        """Sets the optimal of this SubgraphInfo.

        Whether the subgraph is optimal, ie not prematurely stopped by a 'gap_cut' or 'time_limit'. This field is independent from the 'optimality_type' field.   # noqa: E501

        :param optimal: The optimal of this SubgraphInfo.  # noqa: E501
        :type: bool
        """
        if optimal is None:
            raise ValueError("Invalid value for `optimal`, must not be `None`")  # noqa: E501

        self._optimal = optimal

    @property
    def optimality_type(self):
        """Gets the optimality_type of this SubgraphInfo.  # noqa: E501

        'optimal': optimal subgraph 'suboptimal:1': first suboptimal subgraph 'suboptimal:2': second suboptimal subgraph, etc. ...   # noqa: E501

        :return: The optimality_type of this SubgraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._optimality_type

    @optimality_type.setter
    def optimality_type(self, optimality_type):
        """Sets the optimality_type of this SubgraphInfo.

        'optimal': optimal subgraph 'suboptimal:1': first suboptimal subgraph 'suboptimal:2': second suboptimal subgraph, etc. ...   # noqa: E501

        :param optimality_type: The optimality_type of this SubgraphInfo.  # noqa: E501
        :type: str
        """
        if optimality_type is None:
            raise ValueError("Invalid value for `optimality_type`, must not be `None`")  # noqa: E501

        self._optimality_type = optimality_type

    @property
    def root(self):
        """Gets the root of this SubgraphInfo.  # noqa: E501

        Id of root node, either predefined or found by algorithm   # noqa: E501

        :return: The root of this SubgraphInfo.  # noqa: E501
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this SubgraphInfo.

        Id of root node, either predefined or found by algorithm   # noqa: E501

        :param root: The root of this SubgraphInfo.  # noqa: E501
        :type: str
        """
        if root is None:
            raise ValueError("Invalid value for `root`, must not be `None`")  # noqa: E501

        self._root = root

    @property
    def score(self):
        """Gets the score of this SubgraphInfo.  # noqa: E501

        Score of the subgraph  # noqa: E501

        :return: The score of this SubgraphInfo.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SubgraphInfo.

        Score of the subgraph  # noqa: E501

        :param score: The score of this SubgraphInfo.  # noqa: E501
        :type: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubgraphInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
