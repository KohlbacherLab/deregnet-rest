/**
 * DeRegNet REST API
 * DeRegNet REST API 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: deregnet@informatik.uni-tuebingen.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DeRegNetRestApi);
  }
}(this, function(expect, DeRegNetRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DeRegNetRestApi.ParameterSet();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ParameterSet', function() {
    it('should create an instance of ParameterSet', function() {
      // uncomment below and update the code to test ParameterSet
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be.a(DeRegNetRestApi.ParameterSet);
    });

    it('should have the property defaultScore (base name: "default_score")', function() {
      // uncomment below and update the code to test the property defaultScore
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property flipOrientation (base name: "flip_orientation")', function() {
      // uncomment below and update the code to test the property flipOrientation
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property numSuboptimal (base name: "num_suboptimal")', function() {
      // uncomment below and update the code to test the property numSuboptimal
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property maxOverlap (base name: "max_overlap")', function() {
      // uncomment below and update the code to test the property maxOverlap
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property gapCut (base name: "gap_cut")', function() {
      // uncomment below and update the code to test the property gapCut
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property minSize (base name: "min_size")', function() {
      // uncomment below and update the code to test the property minSize
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property maxSize (base name: "max_size")', function() {
      // uncomment below and update the code to test the property maxSize
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property absValues (base name: "abs_values")', function() {
      // uncomment below and update the code to test the property absValues
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property modelSense (base name: "model_sense")', function() {
      // uncomment below and update the code to test the property modelSense
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property algorithm (base name: "algorithm")', function() {
      // uncomment below and update the code to test the property algorithm
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

    it('should have the property timeLimit (base name: "time_limit")', function() {
      // uncomment below and update the code to test the property timeLimit
      //var instane = new DeRegNetRestApi.ParameterSet();
      //expect(instance).to.be();
    });

  });

}));
