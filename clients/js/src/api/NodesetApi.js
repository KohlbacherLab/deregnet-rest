/**
 * DeRegNet REST API
 * DeRegNet REST API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: deregnet@informatik.uni-tuebingen.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NodeSet from '../model/NodeSet';
import NodeSetInfo from '../model/NodeSetInfo';

/**
* Nodeset service.
* @module api/NodesetApi
* @version 1.0.0
*/
export default class NodesetApi {

    /**
    * Constructs a new NodesetApi. 
    * @alias module:api/NodesetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteNodeset operation.
     * @callback module:api/NodesetApi~deleteNodesetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a previously uploaded node set
     * Deletes a node set
     * @param {String} nodesetId ID of the order that needs to be deleted
     * @param {module:api/NodesetApi~deleteNodesetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNodeset(nodesetId, callback) {
      let postBody = null;

      // verify the required parameter 'nodesetId' is set
      if (nodesetId === undefined || nodesetId === null) {
        throw new Error("Missing the required parameter 'nodesetId' when calling deleteNodeset");
      }


      let pathParams = {
        'nodeset_id': nodesetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodeset/{nodeset_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeset operation.
     * @callback module:api/NodesetApi~getNodesetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeSetInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information on a previously uploaded node set
     * @param {String} nodesetId ID of node set to return
     * @param {module:api/NodesetApi~getNodesetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeSetInfo}
     */
    getNodeset(nodesetId, callback) {
      let postBody = null;

      // verify the required parameter 'nodesetId' is set
      if (nodesetId === undefined || nodesetId === null) {
        throw new Error("Missing the required parameter 'nodesetId' when calling getNodeset");
      }


      let pathParams = {
        'nodeset_id': nodesetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeSetInfo;

      return this.apiClient.callApi(
        '/nodeset/{nodeset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodesets operation.
     * @callback module:api/NodesetApi~getNodesetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NodeSetInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available previously uploaded node sets
     * Returns a list with information of all available node sets
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for narrowing the list
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/NodesetApi~getNodesetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NodeSetInfo>}
     */
    getNodesets(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NodeSetInfo];

      return this.apiClient.callApi(
        '/nodesets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeset operation.
     * @callback module:api/NodesetApi~postNodesetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a node set for use with DeRegNet algorithms
     * @param {module:model/NodeSet} body Node set to be uploaded for later use with a DeRegNet algorithm
     * @param {module:api/NodesetApi~postNodesetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postNodeset(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postNodeset");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/nodeset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
