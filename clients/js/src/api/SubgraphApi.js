/**
 * DeRegNet REST API
 * DeRegNet REST API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: deregnet@informatik.uni-tuebingen.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SubgraphInfo from '../model/SubgraphInfo';

/**
* Subgraph service.
* @module api/SubgraphApi
* @version 1.0.0
*/
export default class SubgraphApi {

    /**
    * Constructs a new SubgraphApi. 
    * @alias module:api/SubgraphApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSubgraph operation.
     * @callback module:api/SubgraphApi~deleteSubgraphCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a previously found subgraph
     * Deletes a subgraph
     * @param {String} subgraphId ID of the order that needs to be deleted
     * @param {module:api/SubgraphApi~deleteSubgraphCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubgraph(subgraphId, callback) {
      let postBody = null;

      // verify the required parameter 'subgraphId' is set
      if (subgraphId === undefined || subgraphId === null) {
        throw new Error("Missing the required parameter 'subgraphId' when calling deleteSubgraph");
      }


      let pathParams = {
        'subgraph_id': subgraphId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/subgraph/{subgraph_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadSubgraphAs operation.
     * @callback module:api/SubgraphApi~downloadSubgraphAsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a subgraph
     * With this GET Request you will retrieve a subgraph   
     * @param {String} subgraphId The Name of the graph
     * @param {module:model/String} filetype File type of file to be downloaded
     * @param {module:api/SubgraphApi~downloadSubgraphAsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadSubgraphAs(subgraphId, filetype, callback) {
      let postBody = null;

      // verify the required parameter 'subgraphId' is set
      if (subgraphId === undefined || subgraphId === null) {
        throw new Error("Missing the required parameter 'subgraphId' when calling downloadSubgraphAs");
      }

      // verify the required parameter 'filetype' is set
      if (filetype === undefined || filetype === null) {
        throw new Error("Missing the required parameter 'filetype' when calling downloadSubgraphAs");
      }


      let pathParams = {
        'subgraph_id': subgraphId,
        'filetype': filetype
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;

      return this.apiClient.callApi(
        '/subgraph/{subgraph_id}/{filetype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubgraph operation.
     * @callback module:api/SubgraphApi~getSubgraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubgraphInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the information about a subgraph
     * Returns a single pet
     * @param {String} subgraphId ID of subgraph about which to retrieve information
     * @param {module:api/SubgraphApi~getSubgraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubgraphInfo}
     */
    getSubgraph(subgraphId, callback) {
      let postBody = null;

      // verify the required parameter 'subgraphId' is set
      if (subgraphId === undefined || subgraphId === null) {
        throw new Error("Missing the required parameter 'subgraphId' when calling getSubgraph");
      }


      let pathParams = {
        'subgraph_id': subgraphId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubgraphInfo;

      return this.apiClient.callApi(
        '/subgraph/{subgraph_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubgraphs operation.
     * @callback module:api/SubgraphApi~getSubgraphsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubgraphInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available found subgraphs
     * Returns a single pet
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for narrowing the list
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/SubgraphApi~getSubgraphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubgraphInfo>}
     */
    getSubgraphs(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubgraphInfo];

      return this.apiClient.callApi(
        '/subgraphs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
