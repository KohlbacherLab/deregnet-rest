/**
 * DeRegNet REST API
 * DeRegNet REST API 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: deregnet@informatik.uni-tuebingen.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RunInfo from '../model/RunInfo';
import RunInput from '../model/RunInput';

/**
* Run service.
* @module api/RunApi
* @version 0.0.1
*/
export default class RunApi {

    /**
    * Constructs a new RunApi. 
    * @alias module:api/RunApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteRun operation.
     * @callback module:api/RunApi~deleteRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an active run, you cannot delete finished runs
     * Cancel a run
     * @param {String} runId ID of the run to be deleted
     * @param {module:api/RunApi~deleteRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRun(runId, callback) {
      let postBody = null;

      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling deleteRun");
      }


      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/run/{run_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRun operation.
     * @callback module:api/RunApi~getRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the status of a previously submitted run
     * Returns a single pet
     * @param {String} runId ID of pet to return
     * @param {module:api/RunApi~getRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunInfo}
     */
    getRun(runId, callback) {
      let postBody = null;

      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getRun");
      }


      let pathParams = {
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunInfo;

      return this.apiClient.callApi(
        '/run/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRuns operation.
     * @callback module:api/RunApi~getRunsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RunInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List current and past runs
     * Returns a single pet
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for narrowing the list
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/RunApi~getRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RunInfo>}
     */
    getRuns(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RunInfo];

      return this.apiClient.callApi(
        '/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postRun operation.
     * @callback module:api/RunApi~postRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run average score DeRegNet algorithm
     * @param {module:model/RunInput} body All data needed to run the algorithm
     * @param {module:api/RunApi~postRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunInfo}
     */
    postRun(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postRun");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RunInfo;

      return this.apiClient.callApi(
        '/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
