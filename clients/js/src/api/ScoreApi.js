/**
 * DeRegNet REST API
 * DeRegNet REST API 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: deregnet@informatik.uni-tuebingen.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Score from '../model/Score';
import ScoreInfo from '../model/ScoreInfo';

/**
* Score service.
* @module api/ScoreApi
* @version 0.0.1
*/
export default class ScoreApi {

    /**
    * Constructs a new ScoreApi. 
    * @alias module:api/ScoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteScore operation.
     * @callback module:api/ScoreApi~deleteScoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a previously uploaded node score
     * Delete a previously uploaded node score
     * @param {String} scoreId ID of the node score to be deleted
     * @param {module:api/ScoreApi~deleteScoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScore(scoreId, callback) {
      let postBody = null;

      // verify the required parameter 'scoreId' is set
      if (scoreId === undefined || scoreId === null) {
        throw new Error("Missing the required parameter 'scoreId' when calling deleteScore");
      }


      let pathParams = {
        'score_id': scoreId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/score/{score_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getScore operation.
     * @callback module:api/ScoreApi~getScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information on a previously uploaded score
     * @param {String} scoreId ID of node score to return
     * @param {module:api/ScoreApi~getScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreInfo}
     */
    getScore(scoreId, callback) {
      let postBody = null;

      // verify the required parameter 'scoreId' is set
      if (scoreId === undefined || scoreId === null) {
        throw new Error("Missing the required parameter 'scoreId' when calling getScore");
      }


      let pathParams = {
        'score_id': scoreId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScoreInfo;

      return this.apiClient.callApi(
        '/score/{score_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getScores operation.
     * @callback module:api/ScoreApi~getScoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available previously uploaded node scores
     * Returns a list with all available node scores
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for narrowing the list
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/ScoreApi~getScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreInfo>}
     */
    getScores(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreInfo];

      return this.apiClient.callApi(
        '/scores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postScore operation.
     * @callback module:api/ScoreApi~postScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a node score for use with DeRegNet algorithms
     * @param {module:model/Score} body Node scores to be uploaded for later use with a DeRegNet algorithm
     * @param {module:api/ScoreApi~postScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreInfo}
     */
    postScore(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postScore");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScoreInfo;

      return this.apiClient.callApi(
        '/score', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
