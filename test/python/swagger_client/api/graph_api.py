# coding: utf-8

"""
    DeRegNet REST API

    DeRegNet REST API   # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: deregnet@informatik.uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GraphApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_graph(self, graph_id, **kwargs):  # noqa: E501
        """Delete a previously uploaded network  # noqa: E501

        Delete a previously uplaoded network  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_graph(graph_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str graph_id: ID of the graph to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
            return data

    def delete_graph_with_http_info(self, graph_id, **kwargs):  # noqa: E501
        """Delete a previously uploaded network  # noqa: E501

        Delete a previously uplaoded network  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_graph_with_http_info(graph_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str graph_id: ID of the graph to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['graph_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_graph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'graph_id' is set
        if ('graph_id' not in params or
                params['graph_id'] is None):
            raise ValueError("Missing the required parameter `graph_id` when calling `delete_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'graph_id' in params:
            path_params['graph_id'] = params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/graph/{graph_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_graph(self, graph_id, **kwargs):  # noqa: E501
        """Retrieve information on a previously uploaded graph   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_graph(graph_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str graph_id: ID of graph to return (required)
        :return: GraphInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_graph_with_http_info(graph_id, **kwargs)  # noqa: E501
            return data

    def get_graph_with_http_info(self, graph_id, **kwargs):  # noqa: E501
        """Retrieve information on a previously uploaded graph   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_graph_with_http_info(graph_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str graph_id: ID of graph to return (required)
        :return: GraphInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['graph_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'graph_id' is set
        if ('graph_id' not in params or
                params['graph_id'] is None):
            raise ValueError("Missing the required parameter `graph_id` when calling `get_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'graph_id' in params:
            path_params['graph_id'] = params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/graph/{graph_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GraphInfo',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_graphs(self, **kwargs):  # noqa: E501
        """List available previously uploaded graphs  # noqa: E501

        Returns a list of all available graphs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_graphs(async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_string: pass an optional search string for narrowing the list
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :return: list[GraphInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_graphs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_graphs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_graphs_with_http_info(self, **kwargs):  # noqa: E501
        """List available previously uploaded graphs  # noqa: E501

        Returns a list of all available graphs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_graphs_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_string: pass an optional search string for narrowing the list
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :return: list[GraphInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_string', 'skip', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graphs" % key
                )
            params[key] = val
        del params['kwargs']

        if 'skip' in params and params['skip'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `skip` when calling `get_graphs`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 50:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_graphs`, must be a value less than or equal to `50`")  # noqa: E501
        if 'limit' in params and params['limit'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_graphs`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_string' in params:
            query_params.append(('searchString', params['search_string']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/graphs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GraphInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_graph(self, **kwargs):  # noqa: E501
        """Allows to initiate GraphML upload  # noqa: E501

        This Endpoint creates a Metadata-Object for a Graph. It returns the endpoint that is to be called with the  file containing the graph as payload/body in the header-attribute \"location\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_graph(async=True)
        >>> result = thread.get()

        :param async bool
        :param InitalGraphInfo inital_graph_info: The intial Information required for creating a new graph
        :return: GraphInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_graph_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_graph_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_graph_with_http_info(self, **kwargs):  # noqa: E501
        """Allows to initiate GraphML upload  # noqa: E501

        This Endpoint creates a Metadata-Object for a Graph. It returns the endpoint that is to be called with the  file containing the graph as payload/body in the header-attribute \"location\"   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_graph_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param InitalGraphInfo inital_graph_info: The intial Information required for creating a new graph
        :return: GraphInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inital_graph_info']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_graph" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inital_graph_info' in params:
            body_params = params['inital_graph_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/graph', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GraphInfo',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_graphml(self, graph_id, file_to_upload, **kwargs):  # noqa: E501
        """Uploads a GraphML file  # noqa: E501

        Adds a Graph to the system. The Graph Object with name:graphname must already be created by issuing a POST Request to /graph with repsective payload   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_graphml(graph_id, file_to_upload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str graph_id: The Name of the graph (required)
        :param file file_to_upload: The file containing the graph (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_graphml_with_http_info(graph_id, file_to_upload, **kwargs)  # noqa: E501
        else:
            (data) = self.post_graphml_with_http_info(graph_id, file_to_upload, **kwargs)  # noqa: E501
            return data

    def post_graphml_with_http_info(self, graph_id, file_to_upload, **kwargs):  # noqa: E501
        """Uploads a GraphML file  # noqa: E501

        Adds a Graph to the system. The Graph Object with name:graphname must already be created by issuing a POST Request to /graph with repsective payload   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_graphml_with_http_info(graph_id, file_to_upload, async=True)
        >>> result = thread.get()

        :param async bool
        :param str graph_id: The Name of the graph (required)
        :param file file_to_upload: The file containing the graph (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['graph_id', 'file_to_upload']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_graphml" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'graph_id' is set
        if ('graph_id' not in params or
                params['graph_id'] is None):
            raise ValueError("Missing the required parameter `graph_id` when calling `post_graphml`")  # noqa: E501
        # verify the required parameter 'file_to_upload' is set
        if ('file_to_upload' not in params or
                params['file_to_upload'] is None):
            raise ValueError("Missing the required parameter `file_to_upload` when calling `post_graphml`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'graph_id' in params:
            path_params['graph_id'] = params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file_to_upload' in params:
            local_var_files['file_to_upload'] = params['file_to_upload']  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/graph/{graph_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
